##############
# PRACTICE 7 #
##############

# Check the current working directory
getwd()

# Set working directory
setwd("/Users/fatwaramdani/Documents") 

# Install libraries
#install.packages(c("sf", "tmap", "leaflet")) # Install if not already installed
library(sf)
library(dplyr)
library(ggplot2)
library(tmap)
library(leaflet)

# Import Excel file
library(readxl)
japan_pop <- read_excel("y700203000.xlsx")
View(japan_pop)

# Create a new dataframe with selected columns
japan_pop <- japan_pop[,c(3, 28, 34)]

# Remove missing values
japan_data <- na.omit(japan_pop)

# Rename columns
colnames(japan_data)[c(1, 2, 3)] <- c("ID", "POP10", "POP19")

# Convert population columns to numeric
japan_data$POP2010 <- as.numeric(japan_data$POP10)
japan_data$POP2019 <- as.numeric(japan_data$POP19)

# Calculate population change
japan_data$POPULATION_CHANGE <- japan_data$POP2019 - japan_data$POP2010

# Remove the row for "Japan" in the ID column
japan_data <- subset(japan_data, ID != "Japan")
View(japan_data)

# Save the cleaned data to a CSV file
write.csv(japan_data, "japandata.csv", row.names = FALSE)

############################
# Working with Raster Data #
############################

# Read the shapefile data
japan_admin <- st_read("jpn_admbnda_adm1_2019.shp")

# Check for invalid geometries
is_valid <- st_is_valid(japan_admin)

# Fix invalid geometries if necessary
if (!all(is_valid)) {
  japan_admin <- st_make_valid(japan_admin)
}

# Select only the prefecture name column
japan <- japan_admin %>% select(ADM1_EN)

# Rename column header
colnames(japan)[1] <- "ID"

# Replace prefecture name discrepancies
library(stringr)
rep_str <- c('Gunma'='Gumma', 'Hyōgo'='Hyogo', 'Kōchi'='Kochi', 'Ōita'='Oita')
japan$ID <- str_replace_all(japan$ID, rep_str)

# Remove all spaces from the "ID" column
japan$ID <- str_trim(japan$ID)

# Merge population data with shapefile data
merge_data <- left_join(japan, japan_data, by="ID")

# Quick map of 2010 population
tm_shape(merge_data) + 
  tm_polygons("POP2010") +
  tmap_options(check.and.fix = TRUE, max.categories = 47)

# Quick map of 2019 population
tm_shape(merge_data) + 
  tm_polygons("POP2019") +
  tmap_options(check.and.fix = TRUE, max.categories = 47)

# Quick map of population change
tm_shape(merge_data) + 
  tm_polygons("POPULATION_CHANGE") +
  tmap_options(check.and.fix = TRUE, max.categories = 47)

# Switch to interactive map view
tmap_mode("view")

# Customized map with layout
tm_shape(merge_data) + 
  tm_fill("POPULATION_CHANGE", palette = "RdBu",
          style = "pretty", title = "Population Changes") +
  tm_borders(alpha=.4) +
  tm_compass(type="arrow", position=c("right", "top")) +
  tm_layout(main.title = "Japan Population Changes (2010 to 2019)",
            main.title.position = "center",
            main.title.color = "blue", 
            legend.text.size = 0.7,
            legend.title.size = 1, 
            legend.position = c("right", "bottom"), 
            frame = FALSE)

# Switch back to plot view
tmap_mode("plot")

# Map with histogram in legend
tm_shape(merge_data) + 
  tm_fill("POPULATION_CHANGE", style = "pretty", n = 5,
          palette = "RdBu", title = "Population Changes", legend.hist = TRUE) +
  tm_layout(main.title = "Japan Population Changes (2010 to 2019)",
            main.title.position = "center",
            main.title.color = "blue") +
  tm_borders(alpha=.4) +
  tm_compass(type="rose", position=c("right", "top"), size = 2)

# Add scale bar and change compass style
tm_shape(merge_data) + 
  tm_fill("POPULATION_CHANGE", style = "pretty", n = 5,
          palette = "RdBu", title = "Population Changes") +
  tm_layout(main.title = "Japan Population Changes (2010 to 2019)",
            main.title.position = "center",
            main.title.color = "blue") +
  tm_borders(alpha=.4) +
  tm_compass(type="4star", position=c("right", "top"), size = 2) +
  tm_scale_bar(
    text.size = 0.5,
    color.dark = "black",
    color.light = "white",
    lwd = 1)

library(RColorBrewer)
display.brewer.all()


# Adds OpenStreetMap as base map
library(tmaptools)
library(OpenStreetMap)

merge_data <- st_transform(merge_data, crs = 3857)

osm_world <- read_osm(merge_data)

tm_shape(osm_world) + tm_rgb()+
  tm_shape(merge_data) + 
  tm_fill("POPULATION_CHANGE", palette = "RdBu",
          style = "pretty", title = "Population Changed (1,000)") +
  tm_borders(alpha=.4) +
  tm_compass(type="8star", position=c("right", "top"), size = 2) +
  tm_layout(main.title = "Japan Population Changes (2010 to 2019)",
            main.title.position = "center",
            main.title.color = "black", 
            legend.text.size = 0.7,
            legend.title.size = 1, 
            legend.position = c("right", "bottom"), 
            frame = F)+
  tm_scale_bar(position=c("left", "bottom"))

# Option: Esri World Imagery
esri_imagery <- read_osm(merge_data, type = "esri-imagery")

tm_shape(esri_imagery) + 
  tm_rgb() +
  tm_shape(merge_data) + 
  tm_bubbles(size = "POPULATION_CHANGE", 
             col = "red",         # Set the color of circles
             border.col = "white", # Add a white border for visibility
             scale = 1.5,          # Adjust the size scale of bubbles
             title.size = "Population Change (1,000)") +
  tm_borders(alpha = 0.4) +
  tm_compass(type = "8star", position = c("right", "top"), size = 2,
             color.light = "white",  # Set "N" and compass face to white
             color.dark = "white") + # Set border lines of the compass to white
  tm_layout(main.title = "Japan Population Changes (2010 to 2019)",
            main.title.position = "center",
            main.title.color = "black", 
            legend.text.size = 0.7,
            legend.title.size = 1, 
            legend.text.color = "white",      # Set legend text to white
            legend.title.color = "white",    # Set legend title to white
            legend.position = c("right", "bottom"), 
            frame = FALSE) +
  tm_scale_bar(position = c("left", "top"),
               text.color = "white")         # Scale bar text to white

############################
# Working with Raster Data #
############################

# Check the current working directory
getwd()

# Set working directory
setwd("/Users/fatwaramdani/Documents/Inashiki") # Replace with your directory

# install the randomForest package
#install.packages('randomForest')
#install.packages(c("randomForest", "terra"))
# load the package to get access to the package's routines/functions in your environment
library(randomForest)
library(terra)

# Create SpatRaster objects for single Sentinel layers (bands)
b3 <- rast('2024-05-11-00:00_2024-05-11-23:59_Sentinel-2_L1C_B03.tiff') #Band Green
b4 <- rast('2024-05-11-00:00_2024-05-11-23:59_Sentinel-2_L1C_B04.tiff') #Band Red
b6 <- rast('2024-05-11-00:00_2024-05-11-23:59_Sentinel-2_L1C_B06.tiff') #Band Vegetation red edge
b8 <- rast('2024-05-11-00:00_2024-05-11-23:59_Sentinel-2_L1C_B08.tiff') #Band NIR

# Create a SpatRaster with multiple layers from the existing SpatRaster (single layer) objects.
sentinel <- c(b3, b4, b6, b8)
names(sentinel) <- c('Green', 'Red', 'Red.Edge', 'NIR')
names(sentinel)
print(sentinel)

# Plot the RGB false color composite (FCC) - false colour of vegetation (NIR-Red-Green)
plotRGB(sentinel, r=4, g=2, b=1, stretch = "lin")
plotRGB(sentinel, r=4, g=2, b=1, stretch = "his")

# Calculate NDVI
NDVI <- (b8-b4)/(b8+b4)
plot(NDVI, col= rev(terrain.colors(10)))

# Check NDVI statistics
print(summary(NDVI))

# Check for NA pixels
NDVI_NA_count <- sum(is.na(NDVI[]))
print(paste("Number of NA pixels in NDVI:", NDVI_NA_count))

# Define thresholds and classify NDVI
thresholds <- c(-0.2, 0, 0.2, 0.4, 0.5, 0.78)  # Adjust thresholds as needed
NDVI_classes <- classify(NDVI, thresholds, include.lowest = TRUE)

# Check classified raster
plot(NDVI_classes, main = "NDVI Classes")

# Frequency table of classes
NDVI_table <- freq(NDVI_classes)
print(NDVI_table)

# Define class labels
class_labels <- c("Very high", "High", "Medium", "Low", "Very low")

# Calculate class areas in hectares
class_area_ha <- table(values(NDVI_classes)) * prod(res(NDVI_classes)) / 10000

# Assign class labels
names(class_area_ha) <- class_labels

# Convert to a data frame
total_area <- sum(class_area_ha)
NDVI_class_area_df <- data.frame(
  Class = names(class_area_ha),
  Area_Ha = as.numeric(class_area_ha),
  Percentage = as.numeric(class_area_ha) / total_area * 100
)

# Print the result
print(NDVI_class_area_df)
  
# Save as CSV
write_csv(NDVI_class_area_df, "NDVI_Classes_Area_Percentage.csv")

#############################################
# Land Use Land Cover (LULC) Classification #
#############################################

# load polygons with land use land cover information (training data)
# Install the sf package if not already installed
#install.packages("sf")

# Load the package
library(sf)

# Load a shapefile
shapefile <- st_read("ROI.shp")
print(shapefile)

# Plot the shapefile
plot(shapefile["geometry"])
text(shapefile, shapefile$Class)

# Generate random points within each polygons.
set.seed(123)

# Convert shapefile to SpatVector and sample points
shapefile_vect <- vect(shapefile)
ptsamp <- spatSample(shapefile_vect, 300, method="random")
plot(ptsamp, "Class")

class(sentinel)
class(ptsamp)

###################################
# Training a Classification Model #
###################################

# Extract reflectance values
df <- extract(sentinel, ptsamp, ID=FALSE)

# Combine land-use class with reflectance values
sampdata <- data.frame(class = ptsamp$Class, df)

# Train the classification algorithm using sampdata dataset.
#install.packages("rpart")
library(rpart)

cartmodel <- rpart(as.factor(class) ~ ., data = sampdata, method='class', minsplit=5)

# Visualize the model
plot(cartmodel, uniform=TRUE, main="Classification Tree")
text(cartmodel, cex=1)

###############################
# Classifying the Raster Data #
###############################

# Predict LULC classes
classified <- predict(sentinel, cartmodel, na.rm=TRUE)

# Plot classified raster
plot(classified)

# Identify the class with the highest probability
lulc <- which.max(classified)

################################
# Refining the Classified Data #
################################

# Perform sieve analysis to remove small patches (salt-and-pepper noise)
# Define a minimum patch size (e.g., 5 pixels)
lulc_sieved <- sieve(lulc, threshold=5)

# Set up a top-down layout
par(mfrow=c(2, 1))  # 2 rows, 1 column

# Plot the raw classified map
plot(lulc, main="Classified Map(Raw)")

# Plot the processed classified map
plot(lulc_sieved, main="Classified Map (Salt-and-Pepper Minimized)")

# Save the classified raster to a file
writeRaster(lulc, "classified_map_raw.tif", overwrite = TRUE)
writeRaster(lulc_sieved, "classified_map_sieved.tif", overwrite=TRUE)

########################
# Creating a Final Map #
########################

# Load necessary library
library(tmap)

# Assign class names and colors using a two-column data frame
cls <- c("Agriculture", "Urban", "NaN", "Solar.Panel", "Bareland", "Vegetation", "Water")
df <- data.frame(id = 1:7, class=cls)
levels(lulc_sieved) <- df

# Define custom colors
mycolor <- c("purple", "red", "white", "grey", "orange", "green", "blue")

# Create the map using tmap
map <- tm_shape(lulc_sieved) +
  tm_raster(palette = mycolor, title = "Legend") +
  tm_layout(
    main.title = "Land Use Land Cover Map",
    legend.outside = FALSE,
    legend.position = c("right", "top")
  ) +
  tm_scale_bar() +
  tm_compass(position = c("left", "top"))

# Plot the map
map

# Save the classified map as a GeoTIFF file into the working folder
writeRaster(lulc_sieved, "classified_map_sieved.tif", overwrite = TRUE)

#############################
# Calculating the Area (ha) #
#############################

# Calculate the area of each class in the sieved classified map (lulc)
# Define class labels
class_labels <- c("Agriculture", "Urban", "NaN", "Solar.Panel", "Bareland", "Vegetation", "Water")

# Calculate class areas in hectares
class_area_ha <- table(values(lulc_sieved)) * prod(res(lulc_sieved)) / 10000

# Assign class labels
names(class_area_ha) <- class_labels

# Remove the "NaN" class from calculations
class_area_ha <- class_area_ha[names(class_area_ha) != "NaN"]

# Convert to a data frame
total_area <- sum(class_area_ha)
class_area_df <- data.frame(
  Class = names(class_area_ha),
  Area_Ha = as.numeric(class_area_ha),
  Percentage = as.numeric(class_area_ha) / total_area * 100
)

# Save as CSV
write.csv(class_area_df, "class_area_results.csv", row.names = FALSE)

# Print the result
print(class_area_df)

#########################
# Working with DEM Data #
#########################

# Check the current working directory
getwd()

# Set working directory
setwd("/Users/fatwaramdani/Documents")

# Load required packages
library(raster)
library(rasterVis)
library(rayshader)

# Load the DEM data
dem <- raster("ALPSMLC30_N035E138_DSM.tif")

# Plot the DEM
plot(dem, col = topo.colors(20))

# Visualize the DEM
levelplot(dem, margin = FALSE, col.regions = terrain.colors(255))

# Convert raster to matrix
fuji.new <- raster_to_matrix(dem)

# Visualize the DEM using hillshade technique
fuji.new %>% sphere_shade(sunangle = 45, texture = "desert") %>%
  plot_map()

######################################
# Working with Night Time Light Data #
######################################

# Check the current working directory
getwd()

# Set working directory
setwd("/Users/fatwaramdani/Documents") # Replace with your directory

# Load packages
library(blackmarbler)
library(geodata)
library(sf)
library(terra)
library(ggplot2)
library(tidyterra)
library(lubridate)

# NASA bearer token
bearer <- "eyJ0eXAiOiJKV1QiLCJvcmlnaW4iOiJFYXJ0aGRhdGEgTG9naW4iLCJzaWciOiJlZGxqd3RwdWJrZXlfb3BzIiwiYWxnIjoiUlMyNTYifQ.eyJ0eXBlIjoiVXNlciIsInVpZCI6ImZhdHdhMTkiLCJleHAiOjE3MzU0NTEwNTEsImlhdCI6MTczMDI2NzA1MSwiaXNzIjoiaHR0cHM6Ly91cnMuZWFydGhkYXRhLm5hc2EuZ292In0.kblKg-bHdGYwZWAo9AcqcjbJh42keIlMtFmLQ5CONrTDl8_DAbqjnNMA3ZYT0Lh9JAkmbk994wZsK_bAjnHyoNAi5sdsTRvpTNppxP5G1OtZXyuzDTMl0oJPI_HQIosAJIk1rygYGlVuYSTlLKaMZ31Bk15eC1DkJ-IRnmkWS1UmeXlLikPCtz04YnECTF3Tlesu6u-uw5lblZ-2osXVH91QqpNFMqZBXmbbeADHmh_umg9X8OfWFk1w8QrRSqZu4788otWmdR9z_jR0y9sV5ghISnR9kJ6bSmDPWANSV7v9zOQUlDxyiuSdUqDC5XQuFM_8aYG5-qaIUq2yYOC4bQ"

# Define Region of Interest (ROI)
# Check country codes
cc <- country_codes()
head(cc)

# Query for Palestine
p <- country_codes(query="Palestin")
p

# Define ROI
roi_sf <- gadm(country = "PSE", level = 1, path = tempdir())
# If you have this message: “The geodata server appears to be down. Hopefully it will be back soon.” Just wait a couple of minutes or hours.

# Fetch Nighttime Lights Data for 2014 and 2024
r2014 <- bm_raster(roi_sf = roi_sf, product_id = "VNP46A3", date = "2014-06-01", bearer = bearer)
r2024 <- bm_raster(roi_sf = roi_sf, product_id = "VNP46A3", date = "2024-06-01", bearer = bearer)

# Mask and Log-transform Data
r2014 <- terra::mask(r2014, roi_sf)
r2024 <- terra::mask(r2024, roi_sf)

# Log-transform data
r2014[] <- log(r2014[] + 1)
r2024[] <- log(r2024[] + 1)

# Compute Difference
r_diff <- r2024 - r2014

#########################
# Visualize the Changes #
#########################

# Plot Change Map
change_map <- ggplot() +
  geom_spatraster(data = r_diff) +
  scale_fill_gradient2(low = "black", mid = "white", high = "red", midpoint = 0, na.value = "transparent",
                       name = "Change in NTL") +
  labs(title = "Change in Nighttime Lights Radiance (2014-2024)") +
  coord_sf() +
  theme_minimal() +
  theme(plot.title = element_text(face = "bold", hjust = 0.5))

print(change_map)

####################################################
# Extracting the NTL Trends and Plot using Barplot #
####################################################

# Extract Monthly Trends for NTL
ntl_df_monthly <- bm_extract(roi_sf = roi_sf, product_id = "VNP46A3", 
date = seq.Date(from = as.Date("2023-01-01"), 
to = as.Date("2024-06-01"), 
by = "month"), bearer = bearer, check_all_tiles_exist = FALSE)

# Plot monthly trends
ntl_df_monthly |>
  ggplot() +
  geom_col(aes(x = date, y = ntl_mean), fill = "darkorange") +
  facet_wrap(~NAME_1) +
  labs(x = NULL, 
       y = "NTL Luminosity", 
       title = "Palestine Admin Level 1: Monthly Average Nighttime Lights") +
  scale_x_date(labels = scales::date_format("%b %Y"),
               breaks = scales::date_breaks("2 month")) +
  theme_minimal() +
  theme(strip.text = element_text(face = "bold"),
        axis.text.x = element_text(angle = 45, hjust = 1))  # Diagonal x-axis labels

# Save Data and Rasters
write.csv(ntl_df_monthly, "NTL_Trends_2014_2024.csv", row.names = FALSE)
writeRaster(r_diff, "NTL_Change_2014_2024.tif", filetype = "GTiff", overwrite = TRUE)

