#############
# CHAPTER 4 #
#############

# Figure 4.1 Illustration of mean, median, and mode in a histogram.

# Load necessary libraries
library(ggplot2)

# Generate a sample dataset
set.seed(123)  # For reproducibility
data <- rnorm(1000, mean = 50, sd = 10)  # Normal distribution with mean=50, sd=10

# Calculate mean, median, and mode
mean_value <- mean(data)
median_value <- median(data)

# Define a function to calculate mode
calculate_mode <- function(x) {
  uniq_values <- unique(x)
  uniq_values[which.max(tabulate(match(x, uniq_values)))]
}
mode_value <- calculate_mode(round(data, 1))  # Round data to avoid excessive precision for mode

# Create a data frame for vertical lines
lines_data <- data.frame(
  Statistic = c("Mean", "Median", "Mode"),
  Value = c(mean_value, median_value, mode_value)
)

# Plot the histogram with mean, median, and mode
ggplot(data = data.frame(Value = data), aes(x = Value)) +
  geom_histogram(binwidth = 2, fill = "skyblue", color = "black", alpha = 0.7) +
  geom_vline(data = lines_data, aes(xintercept = Value, color = Statistic), linetype = "dashed", size = 1) +
  scale_color_manual(values = c("Mean" = "red", "Median" = "green", "Mode" = "blue")) +
  labs(title = "", 
       x = "Value", 
       y = "Frequency", 
       color = "Statistic") +
  theme_minimal(base_size = 20)

# Figure 4.2

# Load necessary library
library(ggplot2)

# Set seed for reproducibility
set.seed(123)

# Generate random data for three variables
var1 <- rnorm(100, mean = 50, sd = 10)  # Variable 1: Normal distribution
var2 <- runif(100, min = 30, max = 70)  # Variable 2: Uniform distribution
var3 <- rpois(100, lambda = 40)         # Variable 3: Poisson distribution

# Combine data into a data frame
data <- data.frame(var1, var2, var3)

# Display data in a table
print("Randomly Generated Data:")
print(head(data, 10))  # Show the first 10 rows

# Calculate range, variance, and standard deviation for each variable
summary_stats <- data.frame(
  Variable = c("var1", "var2", "var3"),
  Range = c(diff(range(var1)), diff(range(var2)), diff(range(var3))),
  Variance = c(var(var1), var(var2), var(var3)),
  StdDev = c(sd(var1), sd(var2), sd(var3))
)

print("Summary Statistics:")
print(summary_stats)

# Reshape data for plotting
summary_stats_long <- reshape2::melt(summary_stats, id.vars = "Variable", 
                                     variable.name = "Metric", 
                                     value.name = "Value")

# Plot range, variance, and standard deviation
ggplot(summary_stats_long, aes(x = Variable, y = Value, fill = Metric)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "",
       x = "Variable", y = "Value") +
  theme_minimal(base_size = 20)



# Figure 4.3 Skewness and kurtosis.
# Load necessary libraries
library(ggplot2)

# Set seed for reproducibility
set.seed(123)

# Generate random data for three types of skewness
# Negative skew
neg_skew_data <- rbeta(1000, 2, 5)

# Normal distribution
normal_data <- rnorm(1000)

# Positive skew
pos_skew_data <- rbeta(1000, 5, 2)

# Create a data frame with the three datasets
skew_data <- data.frame(
  value = c(neg_skew_data, normal_data, pos_skew_data),
  type = rep(c("Negative Skew", "Normal", "Positive Skew"), each = 1000)
)

# Plot the data using ggplot
ggplot(skew_data, aes(x = value, fill = type)) +
  geom_histogram(binwidth = 0.05, alpha = 0.7, position = "identity") +
  geom_density(alpha = 0.6, size = 1) +
  facet_wrap(~type, scales = "free", ncol = 1) +
  theme_minimal(base_size = 20) +
  labs(title = "",
       x = "Value",
       y = "Density") +
  scale_fill_manual(values = c("skyblue", "orange", "lightgreen")) +
  theme(legend.position = "none")



# Figure 4.4 Histograms
# Load necessary library
library(ggplot2)

# Generate some sample data
set.seed(123) # For reproducibility
data <- data.frame(
  x = rnorm(100, mean = 50, sd = 10), # Random normal data for x
  y = rnorm(100, mean = 30, sd = 5)   # Random normal data for y
)

ggplot(data, aes(x = x)) +
  geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
  labs(title = "Histogram of X", x = "Values of X", y = "Frequency", size = 5) +
  geom_text(aes(x = 65, y = 15, label = "Bins represent frequency"), color = "red", size = 5) +
  theme_minimal(base_size = 20)

# Figure 4.5 Boxplot
ggplot(data, aes(x = "", y = x)) +
  geom_boxplot(fill = "pink", color = "black", width = 0.2) + # Reduced width for a narrower boxplot
  labs(title = "", y = "Values of X") + 
  stat_summary(geom = "text", aes(label = "Maximum"), fun = max, vjust = -0.5, color = "blue", size = 5) +
  stat_summary(geom = "text", aes(label = "Upper whisker"), fun = function(y) boxplot.stats(y)$stats[4], vjust = -0.5, color = "blue", size = 5) +
  stat_summary(geom = "text", aes(label = "Median (Q2)"), fun = median, vjust = -0.5, color = "red", size = 5) +
  stat_summary(geom = "text", aes(label = "Lower whisker"), fun = function(y) boxplot.stats(y)$stats[2], vjust = 1.5, color = "blue", size = 5) +
  stat_summary(geom = "text", aes(label = "Minimum"), fun = min, vjust = 1.5, color = "blue", size = 5) +
  geom_point(data = data %>% filter(x > boxplot.stats(x)$stats[5] | x < boxplot.stats(x)$stats[1]),
             aes(x = "", y = x), color = "red", size = 3) + # Highlighting outliers
  geom_text(data = data %>% filter(x > boxplot.stats(x)$stats[5] | x < boxplot.stats(x)$stats[1]),
            aes(x = "", y = x, label = "Outlier"), color = "red", size = 5, hjust = -0.2) +
  theme_minimal(base_size = 15) +
  theme(plot.title = element_text(size = 14), # Adjusted title size for better readability
        axis.title.y = element_text(size = 14), 
        axis.text = element_text(size = 14)) 


# Figure 4.6 Scatterplot.
ggplot(data, aes(x = x, y = y)) +
  geom_point(color = "purple") +
  labs(title = "", x = "Values of X", y = "Values of Y", size = 5) +
  geom_text(aes(x = 65, y = 45, label = "Each point is an observation"), color = "red", size = 5) +
  theme_minimal(base_size = 20)


# Figure 4.7 Illustration of “Negative correlation", "No correlation", and "Positive correlation”.

# Load necessary library
library(ggplot2)

# Set random seed for reproducibility
set.seed(123)

# Generate data for positive correlation
x_pos <- seq(1, 100, by=1)
y_pos <- x_pos + rnorm(100, mean=0, sd=10)

# Generate data for negative correlation
x_neg <- seq(1, 100, by=1)
y_neg <- 100 - x_neg + rnorm(100, mean=0, sd=10)

# Generate data for no correlation
x_none <- seq(1, 100, by=1)
y_none <- rnorm(100, mean=50, sd=15)

# Combine data into a data frame
data <- data.frame(
  x = c(x_pos, x_neg, x_none),
  y = c(y_pos, y_neg, y_none),
  Correlation = rep(c("Positive correlation", "Negative correlation", "No correlation"), each=100)
)

# Plot the scatterplots
ggplot(data, aes(x = x, y = y)) +
  geom_point(color = "blue", alpha = 0.7) +
  facet_wrap(~ Correlation, scales = "free") +
  theme_minimal(base_size = 20) +
  labs(title = "",
       x = "X-axis",
       y = "Y-axis")

# Figure 4.9 Illustrate the normal distribution, binomial distribution, and poisson distribution.




#Figure 4.10 Illustration of population and sample.

# Load required libraries
library(ggplot2)

# Set seed for reproducibility
set.seed(123)

# Generate population data (e.g., 500 data points)
population <- data.frame(
  x = rnorm(500, mean = 50, sd = 10), # Random x-values (e.g., ages, incomes)
  y = rnorm(500, mean = 30, sd = 5)   # Random y-values (e.g., scores, heights)
)

# Randomly select a sample from the population (e.g., 50 data points)
sample_size <- 50
sample_indices <- sample(1:nrow(population), size = sample_size)
sample <- population[sample_indices, ]

# Create the plot
ggplot() +
  # Plot the entire population in gray
  geom_point(data = population, aes(x = x, y = y), color = "gray", alpha = 0.5, size = 2) +
  # Highlight the sample in blue
  geom_point(data = sample, aes(x = x, y = y), color = "blue", size = 3) +
  # Add titles and labels
  labs(
    title = "",
    subtitle = paste("Population Size:", nrow(population), "\u2022 Sample Size:", sample_size),
    x = "Variable X",
    y = "Variable Y"
  ) +
  theme_minimal(base_size = 20)


# Figure 4.11 The illustration of confidence interval and errors. 
# Load necessary libraries
library(ggplot2)

# Sample data
set.seed(123)
data <- data.frame(
  x = 1:10,
  y = rnorm(10, mean = 50, sd = 10),
  se = rnorm(10, mean = 0, sd = 2) # standard error for error bars
)

# Calculate the confidence interval (using 95% CI)
data$ci_lower <- data$y - 1.96 * data$se
data$ci_upper <- data$y + 1.96 * data$se

# Create the plot with error bars and confidence intervals
ggplot(data, aes(x = x, y = y)) +
  geom_point(color = "blue", size = 3) + # scatter plot of y values
  geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2, color = "red") + # confidence interval
  geom_errorbar(aes(ymin = y - se, ymax = y + se), width = 0.2, color = "green") + # standard error bars
  labs(title = "",
       x = "X-Axis",
       y = "Y-Axis") +
  theme_minimal(base_size = 20)

