#############
# CHAPTER 3 #
#############

library(ggplot2)
library(dplyr)
library(tidyr)
library(summarytools)
library(DataExplorer)
library(outliers)

# Load sample dataset
# Replace 'mtcars' with your dataset or read in your dataset using read.csv() or similar
data <- mtcars

# Figure 3.1 Summary statistics of the mtcars dataset.
# Summary Statistics
summary_stats <- summary(data)
print("Summary Statistics:")
print(summary_stats)

# Visualize Summary Statistics
data_long <- data %>%
  rownames_to_column(var = "Car") %>%
  pivot_longer(cols = -Car, names_to = "Variable", values_to = "Value")

# Figure 3.2 Box plot of variables of the mtcars dataset.
ggplot(data_long, aes(x = Variable, y = Value)) +
  geom_boxplot(fill = "lightblue") +
  theme_minimal(base_size = 20) +
  labs(title = "", x = "Variable", y = "Value")

# Data Profiling
print("Data Profiling Report:")
create_report(data)

# Data Visualization
# Pairwise Scatter Plots
pairs(data, main = "Pairwise Scatter Plots")

# Figure 3.3 The correlation heatmap of variables as one of the profiling output analysis of the mtcars dataset.
# Correlation Heatmap
cor_matrix <- round(cor(data), 2)
ggplot(melt(cor_matrix), aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1)) +
  theme_minimal(base_size = 20) +
  labs(title = "", x = "", y = "")

# Outlier Detection
print("Outlier Detection:")
outlier_results <- apply(data, 2, function(x) {
  outlier_test <- grubbs.test(x)
  return(list(statistic = outlier_test$statistic, p.value = outlier_test$p.value))
})
print(outlier_results)

# Highlight Outliers in Visualizations
outliers_df <- data %>%
  mutate(across(everything(), ~ifelse(. > mean(.) + 2 * sd(.) | . < mean(.) - 2 * sd(.), "Outlier", "Normal"))) %>%
  pivot_longer(cols = everything(), names_to = "Variable", values_to = "Outlier_Status")

# Figure 3.4 The plot of outliers count per variable of the mtcars dataset.
ggplot(outliers_df, aes(x = Variable, fill = Outlier_Status)) +
  geom_bar(position = "dodge") +
  theme_minimal(base_size = 20) +
  labs(title = "", x = "Variable", y = "Count")


# Figure 3.5 Data cleaning, transformation, and standardization.
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggpubr) # For combining multiple plots

# 1. Create a synthetic dataset with missing values and irregular scales
set.seed(123)
data <- data.frame(
  ID = 1:15,
  Feature1 = c(NA, rnorm(14, mean = 50, sd = 10)), # Some missing values
  Feature2 = c(rnorm(10, mean = 100, sd = 20), rep(NA, 5)), # Missing values in the end
  Feature3 = c(rnorm(10, mean = 0, sd = 1), runif(5, -3, 3)) # No missing values
)

# ----- 2. Deletion -----
data_deleted <- data %>% drop_na()

# Plot missing values before and after deletion
plot_deleted <- ggplot(data, aes(x = ID)) +
  geom_point(aes(y = Feature1), color = "red") +
  geom_point(aes(y = Feature2), color = "blue") +
  labs(title = "Original Data with Missing Values (Red/Blue)") +
  theme_minimal(base_size = 20)

plot_deleted_after <- ggplot(data_deleted, aes(x = ID)) +
  geom_point(aes(y = Feature1), color = "red") +
  geom_point(aes(y = Feature2), color = "blue") +
  labs(title = "After Deletion of Rows with Missing Values") +
  theme_minimal(base_size = 20)

# ----- 3. Imputation -----
data_imputed <- data %>%
  mutate(
    Feature1 = ifelse(is.na(Feature1), mean(Feature1, na.rm = TRUE), Feature1),
    Feature2 = ifelse(is.na(Feature2), median(Feature2, na.rm = TRUE), Feature2)
  )

# Plot after imputation
plot_imputed <- ggplot(data_imputed, aes(x = ID)) +
  geom_point(aes(y = Feature1), color = "green") +
  geom_point(aes(y = Feature2), color = "orange") +
  labs(title = "After Imputation (Mean for Feature1, Median for Feature2)") +
  theme_minimal(base_size = 20)

# ----- 4. Data Transformation and Standardization -----
# Log transformation and standardization
data_transformed <- data_imputed %>%
  mutate(
    Feature1 = scale(log(Feature1 + 1)), # Adding 1 to avoid log(0)
    Feature2 = scale(Feature2),
    Feature3 = scale(Feature3)
  )

# Plot standardized features
plot_transformed <- ggplot(data_transformed, aes(x = ID)) +
  geom_line(aes(y = Feature1, color = "Feature1")) +
  geom_line(aes(y = Feature2, color = "Feature2")) +
  geom_line(aes(y = Feature3, color = "Feature3")) +
  labs(
    title = "After Data Transformation and Standardization",
    color = "Features"
  ) +
  theme_minimal(base_size = 20)

# ----- Combine all plots -----
combined_plot <- ggarrange(
  plot_deleted, plot_deleted_after, plot_imputed, plot_transformed,
  ncol = 2, nrow = 2
)

# Display the plot
print(combined_plot)



