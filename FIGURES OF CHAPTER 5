#############
# CHAPTER 5 #
#############

#Figure 5.1 The example of bad data visualization. Where distorted Y-axis exaggerates the differences, red and bright green clash visually, bright yellow background is distracting, misleading title that exaggerates the data, and missing Y axis legend.
# Load necessary library
library(ggplot2)

# Create a sample dataset
set.seed(42)
data <- data.frame(
  Category = rep(letters[1:5], each = 5),
  Value = c(seq(10, 50, by = 10), rnorm(20, mean = 25, sd = 5)),
  Group = rep(c("X", "Y"), length.out = 25)
)

# Plot: Example of a poorly designed visualization
bad_plot <- ggplot(data, aes(x = Category, y = Value, color = Group, shape = Group)) +
  geom_point(size = 5) +
  
  # Distorted Y-axis exaggerates the differences
  scale_y_continuous(limits = c(20, 30)) +
  
  # Confusing shapes and an inappropriate color palette
  scale_color_manual(values = c("#FF0000", "#00FF00")) + # Red and bright green clash visually
  scale_shape_manual(values = c(15, 17)) +
  
  # Overloaded elements and an overly bold theme
  theme_minimal(base_size = 20) +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1),
    panel.background = element_rect(fill = "#FFD700") # Bright yellow background is distracting
  ) +
  
  # Misleading title that exaggerates the data
  labs(
    title = "DRAMATIC DIFFERENCES in Values by Category!",
    x = "Categories",
    y = "",
    color = "Group",
    shape = "Group"
  )

# Display the bad plot
print(bad_plot)



# Figure 5.3 Illustration of a boxplot with the distribution of values in each group, with mean values represented as blue dots and error bars to represent the confidence interval.
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(ggsignif)

# Example data: Generate sample data with means, errors, and confidence intervals
set.seed(123)  # For reproducibility
data <- data.frame(
  Group = rep(c("A", "B"), each = 100),
  Value = c(rnorm(100, mean = 5, sd = 2), rnorm(100, mean = 7, sd = 2))
)

# Calculate summary statistics (mean, CI, and SD)
summary_stats <- data %>%
  group_by(Group) %>%
  summarise(
    mean_value = mean(Value),
    sd_value = sd(Value),
    se_value = sd_value / sqrt(n()),
    ci_lower = mean_value - qt(0.975, df = n() - 1) * se_value,  # 95% CI
    ci_upper = mean_value + qt(0.975, df = n() - 1) * se_value
  )

# Plot with ggplot2 including error bars and confidence intervals
ggplot() +
  geom_boxplot(data = data, aes(x = Group, y = Value), alpha = 0.5, outlier.colour = "red", outlier.size = 2) +  # Boxplot to show distribution
  geom_point(data = summary_stats, aes(x = Group, y = mean_value), color = "blue", size = 3) +  # Mean values
  geom_errorbar(data = summary_stats, aes(x = Group, ymin = ci_lower, ymax = ci_upper), width = 0.2) +  # Confidence interval
  geom_signif(comparisons = list(c("A", "B")), map_signif_level = TRUE) +  # Significance annotation
  labs(
    title = "",
    x = "Group",
    y = "Value"
  ) +
  theme_minimal(base_size = 20)

#Figure 5.4 Illustration of the visual encoding channels.
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Simulate some data with uncertainty
set.seed(123)
data <- data.frame(
  x = rnorm(100),
  y = rnorm(100),
  uncertainty = runif(100, 0, 1)  # Uncertainty ranges from 0 (high confidence) to 1 (low confidence)
)

# Create a new variable for size (inversely proportional to uncertainty)
data$size <- 5 * (1 - data$uncertainty)

# Create a new variable for transparency (alpha) (higher uncertainty = more transparency)
data$alpha <- 1 - data$uncertainty

# Plotting the data with adjusted color, size, and transparency
ggplot(data, aes(x = x, y = y)) +
  geom_point(aes(color = uncertainty, size = size, alpha = alpha)) +
  scale_color_gradient(low = "blue", high = "red", name = "Uncertainty") +  # Color fades with uncertainty
  scale_size_continuous(range = c(2, 10), name = "Symbol Size") +  # Size increases with lower uncertainty
  scale_alpha_continuous(range = c(0.1, 1), name = "Transparency") +  # Transparency increases with uncertainty
  theme_minimal(base_size = 15) +
  labs(title = "Visualization of Uncertainty Using Visual Encoding Channels",
       x = "X-axis",
       y = "Y-axis") +
  theme(legend.position = "bottom")


# Figure 5.5 Illustration of the hybrid approaches, combining graphical annotations and visual encodings, providing a clear representation of uncertainty and confidence intervals in the data.
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)

# Example dataset: Simulated data with uncertainty (e.g., measurements with confidence intervals)
set.seed(42)
data <- tibble(
  x = rep(seq(1, 10, length.out = 100), 3),
  y = c(rnorm(100, mean = 5, sd = 1), rnorm(100, mean = 6, sd = 1.2), rnorm(100, mean = 7, sd = 0.8)),
  group = rep(c("Group 1", "Group 2", "Group 3"), each = 100)
)

# Calculate summary statistics (mean and 95% confidence intervals)
summary_data <- data %>%
  group_by(x, group) %>%
  summarise(
    mean_y = mean(y),
    lower_ci = mean_y - qt(0.975, df = n() - 1) * sd(y) / sqrt(n()),
    upper_ci = mean_y + qt(0.975, df = n() - 1) * sd(y) / sqrt(n())
  )

# Plotting the Hybrid Approach with contour box plots and interval plots
ggplot(summary_data, aes(x = x, y = mean_y, group = group, color = group)) +
  # Interval plot (95% confidence intervals)
  geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.3) +
  # Contour box plot for uncertainty representation
  geom_boxplot(data = data, aes(x = x, y = y, fill = group), 
               width = 0.2, outlier.shape = NA, alpha = 0.2) +
  # Line for mean y-values
  geom_line(aes(x = x, y = mean_y), size = 1) +
  # Titles and labels
  labs(
    title = "",
    x = "X-axis (Independent Variable)",
    y = "Y-axis (Dependent Variable)",
    fill = "Group",
    color = "Group"
  ) +
  theme_minimal(base_size = 15) +
  theme(legend.position = "top")

#Figure 5.6 Hypothetical Outcome Plots (HOPs). For animation, the GIF file is available here https://x.gd/wONoc 
library(ggplot2)
library(gganimate)
library(dplyr)
library(tidyr)

# Set seed for reproducibility
set.seed(42)

# Parameters for the simulation
n_simulations <- 100  # Number of hypothetical outcomes
data_per_sim <- 50    # Number of data points per simulation
group_means <- c(5, 7)  # Means for two groups
group_sds <- c(2, 3)    # Standard deviations for two groups

group_labels <- c("Group A", "Group B")

# Simulate data for each hypothetical outcome
simulated_data <- expand.grid(Simulation = 1:n_simulations, 
                              Group = group_labels) %>%
  rowwise() %>%
  mutate(Data = list(rnorm(data_per_sim, 
                           mean = if_else(Group == "Group A", group_means[1], group_means[2]), 
                           sd = if_else(Group == "Group A", group_sds[1], group_sds[2])))) %>%
  unnest(Data)

# Create a base plot
plot <- ggplot(simulated_data, aes(x = Group, y = Data, color = Group)) +
  geom_jitter(width = 0.2, alpha = 0.6, size = 2) +
  stat_summary(fun = mean, geom = "point", size = 4, shape = 23, fill = "white") +
  labs(title = "Hypothetical Outcome Plot (HOP)",
       subtitle = "Simulation {closest_state} of {n_simulations}",
       x = "Group",
       y = "Values",
       color = "Group") +
  theme_minimal(base_size = 15) +
  theme(legend.position = "top") +
  transition_states(Simulation, transition_length = 2, state_length = 1, wrap = TRUE) +
  ease_aes('sine-in-out')

# Animate the plot
animated_plot <- animate(plot, nframes = 200, fps = 20, width = 800, height = 600)

# Save the animation
anim_save("HOP_animation.gif", animation = animated_plot)



# Figure 5.7 1D representations with variations of data and uncertain data points.
# Load required libraries
library(ggplot2)
library(dplyr)

# Simulate data with uncertainty
set.seed(42)
n <- 100
data <- data.frame(
  value = rnorm(n, mean = 50, sd = 10),
  group = sample(letters[1:3], n, replace = TRUE)
)

# Add uncertainty: simulate a range (upper and lower bounds)
data <- data %>%
  group_by(group) %>%
  mutate(
    lower_bound = value - rnorm(n(), mean = 0, sd = 2),
    upper_bound = value + rnorm(n(), mean = 0, sd = 2)
  )

# 1. Box Plot with Error Bars (Uncertainty Visualized as Range)
boxplot_error <- ggplot(data, aes(x = group, y = value)) +
  geom_boxplot(aes(fill = group), alpha = 0.3) +
  geom_errorbar(aes(ymin = lower_bound, ymax = upper_bound), width = 0.2, color = "black") +
  labs(title = "Box Plot with Error Bars (Uncertainty)") +
  theme_minimal(base_size = 15)

# 2. Markers Encoding Uncertainty (Using Points and Error Ranges)
markers_uncertainty <- ggplot(data, aes(x = group, y = value)) +
  geom_point(aes(color = group), size = 3) +
  geom_errorbar(aes(ymin = lower_bound, ymax = upper_bound), width = 0.2, color = "red") +
  labs(title = "Markers Encoding Uncertainty") +
  theme_minimal(base_size = 15)

# 3. Display the plots
library(gridExtra)
grid.arrange(boxplot_error, markers_uncertainty, ncol = 2)

# Figure 5.8 Rangefinder boxplot, 2D boxplot, bagplot, and quel and rel plot.
# Load required libraries
library(MASS)      # For generating bivariate normal data
library(ggplot2)   # For advanced plotting
library(ggforce)   # For bagplot-like visualization using geom_mark_hull

# Generate sample bivariate data
set.seed(123)
data <- as.data.frame(mvrnorm(n = 200, mu = c(0, 0), Sigma = matrix(c(1, 0.8, 0.8, 1), 2, 2)))
colnames(data) <- c("X", "Y")

# Function to create Rangefinder Boxplot
rangefinder_boxplot <- function(data) {
  median_x <- median(data$X)
  median_y <- median(data$Y)
  iqr_x <- IQR(data$X)
  iqr_y <- IQR(data$Y)
  
  ggplot(data, aes(x = X, y = Y)) +
    geom_point(alpha = 0.3) +
    geom_vline(xintercept = median_x, color = "red", linetype = "dashed", size = 1) +
    geom_hline(yintercept = median_y, color = "red", linetype = "dashed", size = 1) +
    annotate("rect", xmin = median_x - iqr_x, xmax = median_x + iqr_x,
             ymin = median_y - iqr_y, ymax = median_y + iqr_y, 
             fill = "blue", alpha = 0.2) +
    labs(title = "Rangefinder Boxplot", x = "X", y = "Y") +
    theme_minimal(base_size = 20)
}

# Function to create 2D Boxplot
two_d_boxplot <- function(data) {
  ggplot(data, aes(x = X, y = Y)) +
    geom_point(alpha = 0.3) +
    stat_boxplot(geom = "errorbar", width = 0.2) +
    stat_summary(fun = median, geom = "point", color = "red", size = 3) +
    labs(title = "2D Boxplot", x = "X", y = "Y") +
    theme_minimal(base_size = 20)
}

# Function to create Bagplot
bagplot <- function(data) {
  hull_points <- data[chull(data), ]
  
  ggplot(data, aes(x = X, y = Y)) +
    geom_point(alpha = 0.3) +
    geom_polygon(data = hull_points, aes(x = X, y = Y), fill = "grey", alpha = 0.4) +
    labs(title = "Bagplot", x = "X", y = "Y") +
    theme_minimal(base_size = 20)
}

# Function to create Quel and Rel Plot
quel_rel_plot <- function(data) {
  ggplot(data, aes(x = X, y = Y)) +
    geom_point(alpha = 0.3) +
    geom_rect(aes(xmin = quantile(data$X, 0.25), xmax = quantile(data$X, 0.75),
                  ymin = quantile(data$Y, 0.25), ymax = quantile(data$Y, 0.75)),
              fill = "blue", alpha = 0.2, inherit.aes = FALSE) +
    geom_point(aes(x = median(X), y = median(Y)), color = "red", size = 3) +
    labs(title = "Quel and Rel Plot", x = "X", y = "Y") +
    theme_minimal(base_size = 20)
}

# Generate all plots
rangefinder_plot <- rangefinder_boxplot(data)
two_d_plot <- two_d_boxplot(data)
bag_plot <- bagplot(data)
quel_rel_plot <- quel_rel_plot(data)

# Arrange plots in a 2x2 grid
library(patchwork)
(rangefinder_plot | two_d_plot) / (bag_plot | quel_rel_plot)

# Figure 5.9 3D and 4D representations.
# Load necessary libraries
library(rgl)  # For 3D plotting
library(ggplot2)  # For additional 2D/3D visualization
library(viridis)  # For color scales
library(plotly)  # For interactive plotting

# --- 1. Spherical Glyphs Scaled to Radiosity Differences ---
# Generate some random spherical glyphs based on radiosity differences
n <- 100  # number of glyphs
set.seed(123)

# Random positions
x <- rnorm(n)
y <- rnorm(n)
z <- rnorm(n)

# Radiosity difference (scaled to range [0, 1])
radiosity <- runif(n)

# Plot spherical glyphs
open3d()
spheres3d(x, y, z, radius=0.1 + radiosity * 0.5, col=viridis(100)[floor(radiosity*100)], alpha=0.7)

# --- 2. Line Glyphs Show Tile Particle Positions along Streamlines ---
# Streamline simulation (using random walk for simplicity)
streamline_x <- cumsum(rnorm(100))
streamline_y <- cumsum(rnorm(100))
streamline_z <- cumsum(rnorm(100))

# Plot line glyphs along the streamlines
open3d()
plot3d(streamline_x, streamline_y, streamline_z, type='l', col='blue', lwd=2, main="Streamlines of Tile Particle Positions")

# --- 3. Uncertainty Vector Glyphs over Monterey Bay (Example Data) ---
# Example of vector field over a region, simulating uncertainty vectors
lon <- seq(-123.5, -121.5, length.out = 10)
lat <- seq(36.5, 37.5, length.out = 10)
grid <- expand.grid(lon=lon, lat=lat)

# Simulate uncertainty vectors (random directions and magnitudes)
vec_x <- runif(nrow(grid), -1, 1)
vec_y <- runif(nrow(grid), -1, 1)
vec_z <- runif(nrow(grid), -0.5, 0.5)

# Plot vector glyphs
open3d()
quiver3d(grid$lon, grid$lat, rep(0, nrow(grid)), vec_x, vec_y, vec_z, scale=0.5, color="red", main="Uncertainty Vectors over Monterey Bay")

# --- 4. Line Glyphs Showing Difference Between Interpolated Surfaces (Bilinear vs Multiquadric) ---
# Simulate a grid and create two surfaces: bilinear and multiquadric interpolation
x <- seq(-5, 5, length.out = 50)
y <- seq(-5, 5, length.out = 50)
grid <- expand.grid(x=x, y=y)

# Bilinear interpolation surface (simple)
bilinear_surface <- matrix(outer(x, y, function(x, y) sin(x) * cos(y)), nrow=50)

# Multiquadric surface (more complex)
multiquadric_surface <- matrix(outer(x, y, function(x, y) exp(-(x^2 + y^2))), nrow=50)

# Compute difference surface
diff_surface <- bilinear_surface - multiquadric_surface

# Plot line glyphs showing the difference
open3d()
lines3d(grid$x, grid$y, diff_surface, col='green', lwd=2, main="Difference Between Bilinear and Multiquadric Surfaces")

# Example 4: Line Glyphs showing the difference between bilinear and multiquadric interpolated surfaces
# Generate a surface for interpolation comparison
x <- seq(-3, 3, length.out = 100)
y <- seq(-3, 3, length.out = 100)
z_bilinear <- outer(x, y, function(x, y) sin(x) * cos(y))  # Bilinear surface
z_multiquadric <- outer(x, y, function(x, y) exp(-0.1 * (x^2 + y^2)))  # Multiquadric surface

# Plot the two surfaces
par(mfrow = c(1, 2))
persp(x, y, z_bilinear, main = "Bilinear Interpolation", col = "lightblue")
persp(x, y, z_multiquadric, main = "Multiquadric Interpolation", col = "lightgreen")

# --- 5. Uncertainty Isosurfaces ---
# Generate random 3D data representing uncertainty levels
uncertainty_data <- array(runif(1000), dim=c(10, 10, 10))

# Plot uncertainty isosurface at a certain threshold
open3d()
isosurface3d(uncertainty_data, level=0.5, color='blue', alpha=0.5, main="Uncertainty Isosurface")

# --- 6. Interactive 4D Visualization of Data (Time as 4th Dimension) ---
# Generate some 4D data (3D coordinates over time)
time <- seq(1, 100, by=1)
x <- sin(time) + rnorm(100, 0, 0.1)
y <- cos(time) + rnorm(100, 0, 0.1)
z <- time + rnorm(100, 0, 0.1)

# Create interactive 3D plot (with time as color)
plot_ly(x=x, y=y, z=z, type='scatter3d', mode='markers', marker=list(size=5, color=time, colorscale='Viridis', opacity=0.8)) %>%
  layout(title="4D Data Visualization (Time as 4th Dimension)", scene=list(xaxis=list(title="X"), yaxis=list(title="Y"), zaxis=list(title="Z")))


# Figure 5.10 Forecast with uncertainty intervals.

library(ggplot2)
library(dplyr)
library(plotly)
library(shinydashboard)
library(forecast)

# Sample data: a simple time series with some uncertainty
set.seed(123)
n <- 100
time_series <- ts(rnorm(n, mean = 50, sd = 10), frequency = 12)

# -------------------------------------------
# 1. Tendency and Forecast (e.g., regression & fan charts)
# Forecast with uncertainty intervals
fit <- auto.arima(time_series)
forecast_data <- forecast(fit, h = 12)

# Plotting the forecast with uncertainty bands (fan chart)
ggplot() +
  geom_line(aes(x = time(time_series), y = as.numeric(time_series)), color = "blue", size = 1) +
  geom_ribbon(aes(x = time(forecast_data$mean), ymin = forecast_data$lower[,2], ymax = forecast_data$upper[,2]), 
              fill = "lightblue", alpha = 0.5) +
  geom_line(aes(x = time(forecast_data$mean), y = as.numeric(forecast_data$mean)), color = "red", size = 1) +
  labs(title = "", x = "Time", y = "Value")+
  theme_minimal(base_size = 20)

#Figure 5.11 Spreadsheet of Uncertainty (showing numbers) of Figure 5.8.
# -------------------------------------------
# 2. Spreadsheet of Uncertainty (showing numbers)
# Create a table of the forecast uncertainty
forecast_table <- data.frame(
  Time = c(time(time_series), time(forecast_data$mean)),
  Observed = c(as.numeric(time_series), rep(NA, 12)),
  Forecast = c(rep(NA, n), as.numeric(forecast_data$mean)),
  Lower = c(rep(NA, n), forecast_data$lower[,2]),
  Upper = c(rep(NA, n), forecast_data$upper[,2])
)

# Print the table
print(forecast_table)
# Print only the last ten rows of the forecast table
print(tail(forecast_table, 10))

#Figure 5. 12 Basic summary statistics of the uncertainty (forecast intervals) of Figure 5.8.
# -------------------------------------------
# 3. Statistic Summary of Uncertainty
# Basic summary statistics of the uncertainty (forecast intervals)
summary_stats <- data.frame(
  Statistic = c("Mean", "Standard Deviation", "95% CI Lower", "95% CI Upper"),
  Value = c(mean(forecast_data$mean), 
            sd(forecast_data$mean), 
            mean(forecast_data$lower[,2]), 
            mean(forecast_data$upper[,2]))
)

# Print summary statistics
print(summary_stats)

#Figure 5.13 Representations involving hue, value and transparency, in addition with resolution, fuzziness, and blurring. 
library(ggplot2)
library(scales)
library(ggfx) # For blurring effects

# Example dataset
set.seed(42)
data <- data.frame(
  x = rnorm(100),
  y = rnorm(100),
  uncertainty = runif(100, 0.1, 1) # Uncertainty levels
)

# Create the plot
plot <- ggplot(data, aes(x = x, y = y)) +
  # Points with hue and transparency representing uncertainty
  geom_point(aes(color = uncertainty, alpha = uncertainty), size = 5) +
  
  # Apply blurring to represent fuzziness
  with_blur(
    geom_point(aes(color = uncertainty, alpha = uncertainty), size = 5), 
    sigma = 5 # Degree of blur
  ) +
  
  # Adjust resolution (symbol size)
  geom_point(aes(color = uncertainty, size = uncertainty), alpha = 0.7) +
  
  # Scale color for hue (blue to red gradient)
  scale_color_gradient(low = "blue", high = "red", name = "Uncertainty") +
  
  # Set transparency range
  scale_alpha(range = c(0.3, 1), name = "Transparency") +
  
  # Set size scale for resolution
  scale_size_continuous(range = c(3, 10), name = "Resolution") +
  
  # Add labels and theme
  labs(
    title = "",
    x = "X-axis",
    y = "Y-axis"
  ) +
  theme_minimal(base_size = 20)

# Print the plot
print(plot)



#Figure 5.14  Variable and uncertainty is shown side-by-side.
# Load necessary libraries
library(ggplot2)
library(gridExtra) # To arrange plots side-by-side

# Example data frame (replace this with your actual data)
# Data should have columns: "x", "y", "variable", "uncertainty"
data <- data.frame(
  x = rep(1:10, each = 10),
  y = rep(1:10, times = 10),
  variable = runif(100, 0, 1), # Replace with your variable data
  uncertainty = runif(100, 0, 0.5) # Replace with your uncertainty data
)

# Plot for the variable
variable_plot <- ggplot(data, aes(x = x, y = y, fill = variable)) +
  geom_tile() +
  scale_fill_viridis_c(name = "Variable") +
  theme_minimal(base_size = 20) +
  labs(title = "Variable Representation", x = "X Coordinate", y = "Y Coordinate")

# Plot for the uncertainty
uncertainty_plot <- ggplot(data, aes(x = x, y = y, fill = uncertainty)) +
  geom_tile() +
  scale_fill_viridis_c(name = "Uncertainty", option = "plasma") +
  theme_minimal(base_size = 20) +
  labs(title = "Uncertainty Representation", x = "X Coordinate", y = "Y Coordinate")

# Arrange the two plots side-by-side
grid.arrange(variable_plot, uncertainty_plot, ncol = 2)


#Figure 5.5 Hypothetical Outcome Plots (HOPs). 
library(ggplot2)
library(gganimate)
library(dplyr)
library(tidyr)

# Set seed for reproducibility
set.seed(42)

# Parameters for the simulation
n_simulations <- 100  # Number of hypothetical outcomes
data_per_sim <- 50    # Number of data points per simulation
group_means <- c(5, 7)  # Means for two groups
group_sds <- c(2, 3)    # Standard deviations for two groups

group_labels <- c("Group A", "Group B")

# Simulate data for each hypothetical outcome
simulated_data <- expand.grid(Simulation = 1:n_simulations, 
                              Group = group_labels) %>%
  rowwise() %>%
  mutate(Data = list(rnorm(data_per_sim, 
                           mean = if_else(Group == "Group A", group_means[1], group_means[2]), 
                           sd = if_else(Group == "Group A", group_sds[1], group_sds[2])))) %>%
  unnest(Data)

# Create a base plot
plot <- ggplot(simulated_data, aes(x = Group, y = Data, color = Group)) +
  geom_jitter(width = 0.2, alpha = 0.6, size = 2) +
  stat_summary(fun = mean, geom = "point", size = 4, shape = 23, fill = "white") +
  labs(title = "Hypothetical Outcome Plot (HOP)",
       subtitle = "Simulation {closest_state} of {n_simulations}",
       x = "Group",
       y = "Values",
       color = "Group") +
  theme_minimal(base_size = 15) +
  theme(legend.position = "top") +
  transition_states(Simulation, transition_length = 2, state_length = 1, wrap = TRUE) +
  ease_aes('sine-in-out')

# Animate the plot
animated_plot <- animate(plot, nframes = 200, fps = 20, width = 800, height = 600)

# Save the animation
anim_save("HOP_animation.gif", animation = animated_plot)
