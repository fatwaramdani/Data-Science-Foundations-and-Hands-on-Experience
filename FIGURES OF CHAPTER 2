#############
# CHAPTER 2 #
#############

#Figure 2.1 Illustration of simple structured data.
# Create data for the structured dataset
structured_data <- data.frame(
  Category = c("ID", "Name", "Age", "Salary"),
  Example = c(1, "Alice", 30, 50000)
)

#Figure 2.2 Illustration of simple unstructured data.
view(structured_data)

# Example unstructured data (text-heavy, containing dates and numbers)
unstructured_data <- c(
  "Sakura's birthday is on 1994-12-12. He turned 30 years old.",
  "The project deadline is January 15, 2025, with a budget of $2,000,000.",
  "On 2022/11/30, a record high temperature of 45.6Â°C was reported in the city.",
  "No specific date was mentioned, but sales increased by 15% last month."
)

# Convert the unstructured data into a data frame for processing
data_df <- tibble(text = unstructured_data)

view(data_df)



#Figure 2.3 Illustration of nominal, ordinal, continuous, discrete, and binary data plot in bar plot, histogram, and scatterplot.

# Load necessary libraries
library(ggplot2)

# 1. Nominal Data (Bar Plot)
nominal_data <- data.frame(
  Category = c("Red", "Blue", "Green", "Yellow"),
  Count = c(10, 15, 7, 12)
)

nominal_plot <- ggplot(nominal_data, aes(x = Category, y = Count, fill = Category)) +
  geom_bar(stat = "identity") +
  theme_minimal(base_size = 20) +
  ggtitle("Nominal Data (Bar Plot)")

# 2. Ordinal Data (Bar Plot with Ordered Categories)
ordinal_data <- data.frame(
  Rating = factor(c("Poor", "Fair", "Good", "Very Good", "Excellent"),
                  levels = c("Poor", "Fair", "Good", "Very Good", "Excellent")),
  Count = c(5, 10, 15, 20, 25)
)

ordinal_plot <- ggplot(ordinal_data, aes(x = Rating, y = Count, fill = Rating)) +
  geom_bar(stat = "identity") +
  theme_minimal(base_size = 20) +
  ggtitle("Ordinal Data (Bar Plot with Ordered Categories)")

# 3. Continuous Data (Histogram)
set.seed(42)
continuous_data <- data.frame(Value = rnorm(1000, mean = 50, sd = 10))

continuous_plot <- ggplot(continuous_data, aes(x = Value)) +
  geom_histogram(binwidth = 2, fill = "skyblue", color = "black") +
  theme_minimal(base_size = 20) +
  ggtitle("Continuous Data (Histogram)")

# 4. Discrete Data (Dot Plot)
discrete_data <- data.frame(
  Value = c(1, 2, 3, 4, 5),
  Count = c(12, 18, 7, 10, 13)
)

discrete_plot <- ggplot(discrete_data, aes(x = Value, y = Count)) +
  geom_point(size = 3, color = "darkred") +
  theme_minimal(base_size = 20) +
  ggtitle("Discrete Data (Dot Plot)") +
  xlab("Value") +
  ylab("Count")

# 5. Binary Data (Bar Plot)
binary_data <- data.frame(
  Category = c("Yes", "No"),
  Count = c(45, 55)
)

binary_plot <- ggplot(binary_data, aes(x = Category, y = Count, fill = Category)) +
  geom_bar(stat = "identity") +
  theme_minimal(base_size = 20) +
  ggtitle("Binary Data (Bar Plot)")

# Display plots
library(gridExtra)
grid.arrange(nominal_plot, ordinal_plot, continuous_plot, discrete_plot, binary_plot, ncol = 2)

#Figure 2.4 Illustration of different data types plot in R.
# Illustrating Data Types in R

# Load necessary libraries
library(ggplot2)

# Create example data for each type
data <- list(
  Numeric = runif(10, 0, 10), # Random numeric values
  Integer = sample(1:10, 10, replace = TRUE), # Random integers
  Character = letters[1:10], # First 10 letters of the alphabet
  Logical = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), # Alternating TRUE/FALSE
  Factor = factor(c("A", "B", "A", "C", "B", "A", "C", "B", "A", "C")) # Factor levels
)

# Convert the data to a data frame for visualization
data_frame <- data.frame(
  Index = rep(1:10, 5),
  Value = unlist(data),
  Type = rep(names(data), each = 10)
)

# Ensure correct data types in the data frame
data_frame$Value <- as.character(data_frame$Value) # Convert all to character for uniformity

data_frame$Type <- factor(data_frame$Type, levels = names(data)) # Preserve the order

# Plot the data using ggplot
ggplot(data_frame, aes(x = Index, y = Value, color = Type)) +
  geom_point(size = 4) +
  facet_wrap(~ Type, scales = "free_y") +
  labs(
    title = "",
    x = "Index",
    y = "Value"
  ) +
  theme_minimal(base_size = 20) +
  theme(
    strip.text = element_text(size = 20, face = "bold"),
    legend.position = "none"
  )

#Figure 2.5 Illustration of Likert Scale application.

# Load necessary libraries
library(ggplot2)

# Define Likert scale labels
likert_labels <- c("Strongly Disagree", "Disagree", "Neutral", "Agree", "Strongly Agree")

# Create a data frame for plotting
likert_data <- data.frame(
  Rating = factor(1:5, labels = likert_labels),
  Position = 1:5
)

# Plot the Likert scale with adjusted title positioning
ggplot(likert_data, aes(x = Position, y = 1, label = Rating)) +
  geom_tile(fill = "lightblue", color = "white", height = 0.5, width = 1) +
  geom_text(size = 5, color = "black") +
  scale_x_continuous(breaks = 1:5, labels = likert_labels, limits = c(0.5, 5.5)) +
  scale_y_continuous(limits = c(0.5, 1.5)) +
  theme_minimal() +
  theme(
    axis.title = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.text.x = element_text(size = 12),
    panel.grid = element_blank(),  # Remove the extra comma here
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.margin = unit(c(10, 10, 10, 10), "pt")  # Apply unit to margin adjustment
  ) +
  labs(title = "Please Rate: How satisfied are you with GIS in addressing local issues?")

#Figure 2.6 Illustration of Semantic Differential Scale application.

# Load the library
library(ggplot2)

# Define the semantic differential scale data
scale_data <- data.frame(
  adjective_pairs = c("Positive \u2194 Negative", "Clean \u2194 Dirty", "Sustainable \u2194 Unsustainable", "Beneficial \u2194 Harmful"),
  positive_adjectives = c("Positive", "Clean", "Sustainable", "Beneficial"),
  negative_adjectives = c("Negative", "Dirty", "Unsustainable", "Harmful"),
  x_position = 1:4
)

# Create the plot
plot_scale <- ggplot() +
  geom_tile(data = scale_data, aes(x = x_position, y = 2), fill = "white", color = "black", width = 0.8, height = 0.8) +
  geom_tile(data = scale_data, aes(x = x_position, y = 1), fill = "white", color = "black", width = 0.8, height = 0.8) +
  geom_text(data = scale_data, aes(x = x_position, y = 2, label = positive_adjectives), color = "black", hjust = 0.5, vjust = 0.5) +
  geom_text(data = scale_data, aes(x = x_position, y = 1, label = negative_adjectives), color = "black", hjust = 0.5, vjust = 0.5) +
  scale_y_continuous(breaks = c(1, 2), labels = c("Negative", "Positive")) +
  coord_flip() +
  theme_minimal() +
  labs(
    title = "Please rate the effectiveness of AI technologies in environmental monitoring",
    x = "Adjective Pair",
    y = "Scale"
  ) +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    plot.title = element_text(size = 16),
    axis.text.y = element_text(size = 12)
  )

# Display the plot
print(plot_scale)

#Figure 2.7 Illustration of Numerical Rating Scale application.

# Load required package
library(ggplot2)

# Define data for the rating scale
rating_scale <- data.frame(
  Rating = 1:5,
  Description = c("Not satisfied at all", "Slightly satisfied", "Neutral", 
                  "Moderately satisfied", "Very satisfied")
)

# Plot the rating scale
ggplot(rating_scale, aes(x = factor(Rating), y = 1)) +
  geom_tile(fill = "white", color = "black") +  # Create empty boxes
  geom_text(aes(label = Description), vjust = -1, hjust = 0.5, size = 5) +  # Add descriptions
  geom_text(aes(label = Rating), color = "black", size = 6, vjust = 0.5) +  # Add numbers
  scale_y_continuous(limits = c(0, 2), breaks = NULL) +  # Hide y-axis
  theme_minimal() +
  labs(title = "Rate your satisfaction for the Data Science class", x = "Rating", y = "") +
  theme(
    axis.title.x = element_text(size = 14),
    axis.text.x = element_text(size = 12),
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.ticks.y = element_blank()
  )

#Figure 2.8 Illustration of Visual Analog Scale application.

# Load necessary libraries
library(ggplot2)

# Create a data frame for the scale points
scale_data <- data.frame(
  x = c(1, 2, 3, 4, 5),
  labels = c("Extremely Unsatisfied", "Unsatisfied", "Neutral", "Satisfied", "Extremely Satisfied")
)

# Create a ggplot to visualize the scale
ggplot(scale_data, aes(x = x, y = 1)) +
  geom_segment(aes(x = 1, xend = 5, y = 1, yend = 1), size = 2, color = "grey") + # bar
  geom_point(aes(x = x, y = 1), size = 4, color = "blue") +  # marker points
  geom_text(aes(x = x, y = 1.1, label = labels), size = 4, hjust = 0.5, vjust = 0) + # labels
  theme_minimal() +
  scale_x_continuous(breaks = scale_data$x, labels = scale_data$labels, limits = c(0.5, 5.5)) +
  scale_y_continuous(limits = c(0, 2)) +
  theme(
    axis.title = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid = element_blank()
  ) +
  ggtitle("Please rate your satisfaction with environmental sustainability efforts at your region")

Figure 2.9 The "Five Vs" of big data and its relationship.

# Load necessary libraries
library(ggplot2)
library(grid)

# Set up the positions for the circles with large sizes to ensure overlap
circle_data <- data.frame(
  V = c("Volume", "Variety", "Velocity", "Veracity", "Value"),
  x = c(0.25, 0.75, 0.25, 0.75, 0.5),
  y = c(0.75, 0.75, 0.25, 0.25, 0.5),
  r = rep(0.6, 5),  # Significantly increase the radius of the circles to cause overlap
  color = c("lightgrey", "lightgrey", "lightgrey", "lightgrey", "darkgrey")  # Different colors for each circle
)

# Create the plot with large circles that will overlap and different colors
ggplot(circle_data) +
  # Add circles with different colors to cause overlap
  geom_point(aes(x = x, y = y), size = 100, shape = 21, color = "black", fill = circle_data$color) +
  # Add text labels for the circles with a larger font size
  geom_text(aes(x = x, y = y, label = V), size = 11, fontface = "bold", color = "black") +
  # Customize plot appearance
  theme_void() +
  theme(
    panel.grid = element_blank()
  ) +
  coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +
  ggtitle("") +
  theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"))
